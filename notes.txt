1. pnpm create skeleton-app@latest AppNameHere
2. pnpm cd AppNameHere
3. pnpm i
4. pnpm i prisma -D 
5. @prisma/client
6. pnpx prisma init --datasource-provider sqlite //change to any db provider or
7. configure 
	// prisma/schema.prisma:
	datasource db {
		provider = "sqlite" // change to any db provider: "postgresql"
		url = "file: ./dev.sqlite" // change to live path (database path and name): env("DATABASE_URL")
	}
	
8. create db models (tables)
	// prisma/schema.prisma:
	model Article {
		id			Int			@id @default(autoincrement())
		title		String
		content		String
	}
	
9. Connect the database:
	pnpx prisma migrate db --name init // db is the database name and init is the migration name
	pnpx prisma db push
	
10. To avoid multiple instances of prisma on hotreloading: 
	a. create global variable in app.d.ts
		// src/app.d.ts
		import type { PrismaClient } from "@prisma/client"
		
		declare global {
			namespace App {
			
			}
			var prisma: PrismaClient;
		}
		export {}
	
	b. create prisma server page (server side code)
		// src/lib/server/prisma.ts
		import { PrismaClient } from "@prisma/client"
		
		const prisma = global.prisma || new PrismaClient();//avoiding multiple instances of PrismaClient
		
		if(process.env.NODE_ENV === "development"){
			global.prisma = prisma
		}
		
		export { prisma }
	
11. Create the main page:
	// src/routes/+page.svelte
	<div class="grid">
		<div>
			<h2>Articles</h2>
			<article>
				<header>Example Article</header>
				<p>
					Lorem ipsum dolor
				</p>
				<button class="btn outline btn-secondary>Delete Article</button>
				<button class="btn outline btn-warning>Edit Article</button>
			</article>
		</div>
		<form action="?/createArticle" method="POST">
			<h3>New Article</h3>
			<label for="title">Title</label>
			<input type="text" id="title" name="title" />
			<label for="title">Content</label>
			<textarea id="content" name="content" rows="4" />
			<button type="submit">Add Article</button>
		</form>
	</div>

12. Create main server page:
	// src/routes/+page.server.ts
	import type { Actions } from "./$types";
	import { prisma } from "$lib/server/prisma";
	import { fail } from "@sveltejs/kit
	
	export const actions: Actions = {
		createArticle: async ({ request }) => {
			const { title, content } = Object.fromEntries(await request.formData()) as {
				title: string
				content: string
			}
		}
		try {
			await prisma.article.create({
				data: {
					title,
					content
				}
			})
		}catch (err) {
			console.log(err);
			return fail(500, {message: 'Could not create the article'})
		}
		
		return{
			status: 201,
		}
	}
13. To fetch the articles: 
	a. add this code to the main server page:
		src/routes/+page.server.ts
		export const load: PageServerLoad = async ()=>{
			return {
				articles: await prisma.article.findMany(),
			}
		}
	
	b. update the main page:
	src/routes/+page.svelte
	<script lang="ts">
	import type { PageData } from "./$types"
	
	export let data: PageData
	$: ([articles] = data)
	</script>
	... you know the rest
	
14. To delete article:
	a. modify the main page delete button:
	<form action="?/deleteArticle&id={article.id}">
		<button class="btn outline btn-secondary>Delete Article</button>
	</form>
	
	b. add delete action to the server page:
	// src/routes/+page.servre.ts
	deleteArticle: async ({ url }) => {
		const id = url.searchParams.get('id');
		if(!id) {
			return fail(500, { message: "Invalid request"})
		}
		
		try {
			await prisma.article.delete({
				where:{
					id: Number(id)	
				}
			})
		}catch (err) {
			console.error(err)
			return fail(500, {message: "Something went wrong deleting your article"})
		}
		
		return {
			status: 200	
		}
	}

15. To update article:
	a. we need to create a new route as an editor named [articleId] and create +page.svelte for the form and +page.server.ts for the server
	
	b. get the article from the provided id of the route params
	// src/routes/[articleId]/+page.server.ts
	import { PageLoadServer } from "./$types"
	import { prisma } from "$lib/server/prisma"
	import { error } from "@seveltejs/kit"
	
	export const load: PageLoadServer = async ({ params }) => {
		const getArticle = async () => {
			const article = await prisma.article.findUnique({
				where: {
					id: Number(params.articleId)
				}
			})
			if(!article){
				throw error(404, "Article not found");
			}
			return article
		}
		
		return {
			article: getArticle(),
		}
	}
	
	b. create the edit article form
	// src/routes/[artcleId]/+page.svelte
	<script lang="ts">
	import type { PageData } from "./$types"
	
	export let data: PageData
	
	$: ({article} = data)
	</script>
	// Copy the form create article page
	
		<form action="?/updateArticle" method="POST">
			<h3>Editing: {article.title}</h3>
			<label for="title">Title</label>
			<input type="text" id="title" name="title" value={article.title} />
			<label for="title">Content</label>
			<textarea id="content" name="content" rows="4" value={article.content} />
			<button type="submit">Update Article</button>
		</form>
		
	c. modify the edit button href of the create article form to href="/{article.id}"
	
	d. to handle the updateArticle action add this code to the [aricleId] server:
	// src/routes/[articleId]/+page.server.ts
	import { ...eLoadServer, Actions } from "./$types"
	...
	
	export const actions: Actions = {
		const updateArticle = async ({ request, params }) => {
			const { title, content } = Object.fromEntries(await request.formData()) as {
				title: string
				content: string
			}
			
			try {
				await prisma.article.update({
					where: {
						id: Number(params.articleId),
					},
					data: {
						title,
						content,
					},
				})
			}catch (err) {
				console.error(err);
				return fail(500, {message: "Could not update article"})
			}
			
			return {
				status: 200,
			}
		}
	}
